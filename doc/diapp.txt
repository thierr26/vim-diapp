*diapp.txt* Commands (hopefully) useful for software development activities


Author:		Thierry Rascle <thierr26@free.fr>
For Vim:	7.0 and later
Last change:	2020-11-17


                               DIAPP USER MANUAL

==============================================================================


CONTENTS                                                      *diapp-contents*

	GENERAL INFORMATION  . . . . . . . . . . . |diapp-general-information|
	GPRBUILD RELATED COMMANDS  . . . . . . . . |diapp-gprbuild|
	FAVORITE SHELL COMMANDS RELATED COMMANDS . |diapp-shellfav|
	FILE RINGS RELATED COMMANDS  . . . . . . . |diapp-file-ring|
	VIM HELP FILE RELATED ACTIONS AND COMMANDS |diapp-vimhelp|
	GENERAL COMMANDS . . . . . . . . . . . . . |diapp-general|
	CREDITS AND LICENSE  . . . . . . . . . . . |diapp-license|

==============================================================================


GENERAL INFORMATION                                *diapp-general-information*

Disabling Diapp~
                                                              *g:loaded_diapp*
Set g:loaded_diapp to 1 in your |.vimrc| to disable entirely Diapp. >

	:let g:loaded_diapp = 1
<

Diapp installation checking~
                                                      *:EchoDiappFeatureNames*
Diapp's functionnalities are mostly coded in `autoload` scripts. Each of
Diapp's autoload scripts defines a set of commands (also called a "feature").
One defines the GPRbuild related commands, another one defines the file rings
related commands, etc.

On startup, Diapp checks the presence of the autoload scripts. If they are not
found, then Diapp won't work at all (and a message is displayed to inform you).
If they're found, then Diapp should work properly and the features names can
be listed with the following command: >

	:EchoDiappFeatureNames
<

Diapp commands availability~
                                                 *diapp-commands-availability*
Diapp does not systematically refresh its user interface, based on the type of
the file you are editing (see |filetype|). This implies that when trying to
use the commands documented in this manual, you may experience error |E492|
("not an editor command"). It means that Diapp has not defined the command you
are trying to use because it's not useful at the moment. Editing another type
of file may result in the command being defined.

User interface refresh management~
                                                  *g:diapp_min_refresh_period*
If Vim has been compiled with the `+reltime` feature, then Diapp avoids
refreshing the user interface repetitively for a given buffer, which could
happen due to |autocommands| being triggered for multiple events (|BufEnter|,
|FileType|). A period parameter is used, which defaults to 1.8s. Set
g:diapp_min_refresh_period to a different value (in seconds) in your |.vimrc|
if needed (but it shouldn't be needed).

Diapp menus~
                                                                 *diapp-menus*
Diapp creates menus, available to users running a version of Vim with the
|GUI| (and with |menus| not hidden of course). The absence of a menu or menu
item means that the associated command(s) are not available because they're
not useful at the moment. A menu item may also be present but disabled
(grayed), which means it's not useful at the moment. In this case, an
informational text may appear instead of the normal menu item label to
indicate why it's disabled.

==============================================================================


GPRBUILD RELATED COMMANDS                                     *diapp-gprbuild*

GPRbuild is the project manager of the GNAT toolchain. You may want to read the
following pages for more details:
https://learn.adacore.com/courses/GNAT_Toolchain_Intro/chapters/gprbuild.html
http://www-staging.eu.adacore.com/gnatpro/toolsuite/gprbuild/

Diapp offers some commands to invoke GPRbuild from within Vim.

                                                   *g:diapp_gprbuild_disabled*
Set g:diapp_gprbuild_disabled to 1 in your |.vimrc| to disable the whole set
of commands described in this section. >

	:let g:diapp_gprbuild_disabled = 1
<

GNAT project file selection~

Diapp automatically selects a GNAT project file (.gpr file) if it finds a
"concrete" one that seems appropriate.

Diapp starts searching in the current working directory. If a default.gpr file
is found, then Diapp selects it as the GNAT project file. Otherwise, Diapp
checks the other .gpr files (if any) and selects one of them based on the
following rules:

	Diapp does not select an abstract project (i.e. one that is defined
	using the "abstract" reserved word).

	Priority is given to files with a name ending with _test.gpr.

If no GNAT project is selected after searching in the current working
directory, then the same search is done in its parent directory. And so on, up
to the root of the file system.

                                           *g:diapp_gprbuild_default_gpr_file*
You can force Diapp to automatically select a GNAT project file by setting
g:diapp_gprbuild_default_gpr_file in your |.vimrc| file. >

	:let g:diapp_gprbuild_default_gpr_file = path/to/the/gnat_project.gpr
<

:SelectCurGPRFile                                          *:SelectCurGPRFile*
		Make the currently edited file the selected GNAT project file
		(only if the currently edited file is a non abstract GNAT
		project file).

:SelectGPRFile {file}                                         *:SelectGPRFile*
		Make file {file} the selected GNAT project (only if {file} is
		a non abstract GNAT project file). >

			:SelectGPRFile path/to/gnat_project_file.gpr
<

                                                                *:EchoGPRFile*
:EchoGPRFile	Echo the name of the currently selected GNAT project file (if
		any).

GPRbuild options management~

:SetGPRbuildOpt {options}                                    *:SetGPRbuildOpt*
		Define options to be used in GPRbuild commands. Options
		provided in {options} are used in addition to options that
		Diapp unconditionally passes to GPRbuild (see
		|:GPRbuildCompileCurFile| for more details). Example: >

			:SetGPRbuildOpt -eL -XBUILD=DEBUG
<

                                   *g:diapp_gprbuild_default_gprbuild_options*
		By default, no options are defined. Set
		g:diapp_gprbuild_default_gprbuild_options in your |.vimrc| to
		set options by default. Example: >

			:let g:diapp_gprbuild_default_gprbuild_options
				\ = "-eL -XBUILD=DEBUG"
<

:ResetGPRbuildOpt                                          *:ResetGPRbuildOpt*
		Cancel the effect of any previous invocation(s) of
		|:SetGPRbuildOpt|.

:EchoGPRbuildOpt                                            *:EchoGPRbuildOpt*
		Echo the options (if any) defined using |:SetGPRbuildOpt|.

                                                       *g:diapp_gprbuild_lang*
By default, Diapp sets the LANG environment variable to "C" when calling
gprbuild. This makes sure the diagnostic messages will be properly categorized
in the |quickfix| list. You can force another value for LANG by setting
g:diapp_gprbuild_lang to this value in your |.vimrc|. Set
g:diapp_gprbuild_lang to an empty value to prevent Diapp from setting LANG at
all. >

	:let g:diapp_gprbuild_lang = ""
<

GPRbuild invocation~

:GPRbuildCompileCurFile                              *:GPRbuildCompileCurFile*
		Elaborate a GPRbuild command based on the currently edited
		file, the currently selected GNAT project file (if any) and
		the defined GPRbuild options, and run the command. Also, if any
		diagnostic message (error, warning, ...) is issued by
		GPRbuild, populate the |quickfix| list and open the
		|quickfix-window|.

			If the currently edited file is not a GNAT project
			file (.gpr file), then the GPRbuild command is made to
			compile the currently edited file with the assumption
			it belongs to the currently selected GNAT project
			file. Binding or link edition is not attempted.
			Switches -U ("compilation of file provided on the
			command line") and -f ("forced recompilation") are
			used, and also switch -gnatc ("syntax and semantic
			check only") if the compiled file is an Ada
			specification (.ads file).

			If the currently edited file is a non abstract GNAT
			project file, then the GPRbuild command is made to
			build the project (binding and link edition included).

			If the currently edited file is an abstract GNAT
			project file, then nothing is done.

		In all cases, the -p switch is used ("creation of missing
		directories" (typically the object files and binary files
		directories).

		The other switches used are only to force the diagnostic
		messages format (which is important to reliably populate the
		|quickfix| list).

		All changed buffers are written before executing the GPRbuild
		command.

		After the command execution, a line is saved to
		|message-history| (using |echomsg|) indicating the result of
		the command ("Passed" if it terminated with exit status 0 or
		"Failed" with exit status value) and the count of diagnostic
		messages in the |quickfix-window|.

                                                   *g:diapp_gprbuild_comm_msg*
		You can avoid repeated calls to |echomsg| by setting
		g:diapp_gprbuild_comm_msg to 0 in your |.vimrc|: >

			:let g:diapp_gprbuild_comm_msg=0
<

		This causes |echomsg| to be called only if the GPRbuild
		command is different from the previously run GPRbuild command.

                                        *g:diapp_gprbuild_compile_cur_mapping*
		|:GPRbuildCompileCurFile| is mapped by default to <F10> (in
		both normal and insert mode). Set variable
		g:diapp_gprbuild_compile_cur_mapping in your |.vimrc| to map
		the command to another key. Example with <F4>: >

			:let g:diapp_gprbuild_compile_cur_mapping="<F4>"
<

:GPRbuildCompileCurUnit                              *:GPRbuildCompileCurUnit*
		Do what |:GPRbuildCompileCurFile| would do with the difference
		that  when the currently edited file is the specification of
		an Ada unit (an .ads file) and a body (.adb file) exists for
		this unit, then the elaborated command is the one that
		|:GPRbuildCompileCurFile| would have elaborated for the body.

                                       *g:diapp_gprbuild_compile_unit_mapping*
		|:GPRbuildCompileCurUnit| is mapped by default to <F11> (in
		both normal and insert mode). Set variable
		g:diapp_gprbuild_compile_unit_mapping in your |.vimrc| to map
		the command to another key. Example with <F4>: >

			:let g:diapp_gprbuild_compile_unit_mapping="<F4>"
<

Last GPRbuild command~

:EchoLastGPRbuildCommand                            *:EchoLastGPRbuildCommand*
		Echo the last GPRbuild command run (if any).

GPRclean options management~

:SetGPRcleanOpt {options}                                    *:SetGPRcleanOpt*
		Define options to be used in GPRclean commands. Options
		provided in {options} are used in addition to options that
		Diapp unconditionally passes to GPRclean (see |:RunGPRclean|
		for more details). Example: >

			:SetGPRcleanOpt -c -r
<

                                   *g:diapp_gprbuild_default_gprclean_options*
		By default, no options are defined. Set
		g:diapp_gprbuild_default_gprclean_options in your |.vimrc| to
		set options by default. Example: >

			:let g:diapp_gprbuild_default_gprclean_options
				\ = "-c -r"
<

:ResetGPRcleanOpt                                          *:ResetGPRcleanOpt*
		Cancel the effect of any previous invocation(s) of
		|:SetGPRcleanOpt|.

:EchoGPRcleanOpt                                            *:EchoGPRcleanOpt*
		Echo the options (if any) defined using |:SetGPRcleanOpt|.

GPRclean invocation~

:RunGPRclean                                                    *:RunGPRclean*
		Elaborate a GPRclean command based on the currently selected
		GNAT project file (if any) and the defined GPRclean options,
		and run the command.

GPRbuild / GPRclean reinvocation~

Command |:RerunLastDiappExtCommand| (mapped by default to <F12>) repeats the
last invocation of GPRbuild or GPRclean (whichever has been called last). Keep
in mind that :RerunLastDiappExtCommand runs the last external command invoked
by a Diapp feature. So it may not run GPRbuild or GPRclean but run an entirely
different command instead.

                                *g:diapp_gprbuild_hide_qf_on_successful_rerun*
By default, Diapp's behavior is the same on a GPRbuild reinvocation as on the
initial invocation: The |quickfix-window| is opened if there is at least one
diagnostic message to be shown, even if GPRbuild exit status is 0 (which means
that none of the diagnostic messages are error messages, they are "only"
warnings or notes). You can change the behavior on reinvocations by setting
variable g:diapp_gprbuild_hide_qf_on_successful_rerun to 1 in your |.vimrc|,
which causes the |quickfix-window| to be hidden (that is not opened or closed
if it were already opened) if GPRbuild exit status is 0: >

			:let g:diapp_gprbuild_hide_qf_on_successful_rerun=1
<

                                                    *diapp-gprbuild-auto-fill*
For files of type "ada", "c", "cpp" or "fortran", the default pattern for the
|:AF| command is the hyphen ("-").

==============================================================================


FAVORITE SHELL COMMANDS RELATED COMMANDS                      *diapp-shellfav*

Diapp makes it possible to add user defined shell commands (user's "favorite
shell commands") in Vim's menu (the ShellFavs menu), possibly with a mapping,
to make them easy to launch. An alias is also associated with each command,
useful to launch them from the |Command-line-mode| using command |SF|.

This diapp feature is anlternative to |:!|.

                                                   *g:diapp_shellfav_disabled*
Set g:diapp_shellfav_disabled to 1 in your |.vimrc| to disable the whole set
of commands described in this section. >

	:let g:diapp_shellfav_disabled = 1
<

Favorite shell commands addition from a file read on startup~

Diapp automatically reads file diapp_shellfavs.txt (if it exists in the
current directory on startup) and populates the ShellFavs menu based on the
content of the file. Each line in this file is supposed to be like one of the
following:

	,<F2>,c1,command_name_1 arg1 arg2 ...

	,c2,command_name_2 arg1 arg2 ...

In the first example, the line is a comma separated list made of:

	A key (used for the mapping) (<F2> in the example).

	An alias to be used with command |SF|.

	A shell command (with zero or more arguments) with a
leading comma added. Commas (if any) appearing in the shell command are not
interpreted as separators.

In the second example, there is no key (thus no mapping). It is the absence of
a leading comma that indicates the absence of a key.

Diapp aborts the reading of the file as soon as it detects that one of the
condition is true:

	The number of lines in the file is greater than 10.

	The byte length of a line is greater than 300.

You can tune the parameters by setting variables in your |.vimrc|. Examples: >

	:let g:diapp_shellfav_file_line_max_length = 500
	:let g:diapp_shellfav_file_max_line_count = 20
	:let g:diapp_shellfav_file_name = "custom_diapp_shellfavs.txt"
<

In the ShellFavs menu, the labels for the command may be truncated if too
long. The label length limit is 50 characters by default. You can tune this
value by setting the g:diapp_shellfav_menu_label_max_len in your |.vimrc|.
Example: >

	:let g:diapp_shellfav_menu_label_max_length = 70
<

Setting g:diapp_shellfav_file_name to an empty string causes Diapp to not
attempt to read any file.

:EchoShellFavs                                                 *EchoShellFavs*
	Lists the lines read from the file specified by
	g:diapp_shellfav_file_name or read from diapp_shellfavs.txt.

Favorite shell commands refresh~

:ReadShellFavsFile                                         *ReadShellFavsFile*
	Refresh the favorite shell commands. The strategy is the same as for
	startup. That is:

		Don't read any file if g:diapp_shellfav_file_name is set to an
		empty string.

		Read the file specified in g:diapp_shellfav_file_name (or
		don't read any file if this file does not exist).

		Otherwise read file diapp_shellfavs.txt if it exists.

Favorite shell commands invocation~

Users running a version of Vim with the |GUI| (and with |menus| not hidden of
course) can invoke their favorite shell commands from the ShellFavs menu.

Another option is to use the command |SF|.

:SF {alias}                                                               *SF*
	Launch the favorite shell command associated with {alias}, as if it
	had been launched with |!:|.

Favorite shell commands reinvocation~

Command |:RerunLastDiappExtCommand| (mapped by default to <F12>) repeats the
last invocation of a favorite shell command. Keep in mind that
:RerunLastDiappExtCommand runs the last external command invoked by a Diapp
feature. So it may not run the last favorite shell command you invoked but run
an entirely different command instead.

==============================================================================


FILE RINGS RELATED COMMANDS                                  *diapp-file-ring*

A file ring in Diapp is a short list of files and command |:A| makes it
possible to cycle easily through those files. For example, when you're editing
a C source file (a .c file), |:A| will open the corresponding header file (.h
file) in the current window (only if this file exists).

|:EchoAllFRing| shows all the possible kind of file rings.
|:EchoFRingCandidates| shows the file rings the currently edited file may
belong to. |:EchoFRingNext| shows the name of the file |:A| would open.

Diapp's |:A| command has been inspired by the command with the same name in
plugin a.vim by Mike Sharpe. See
https://www.vim.org/scripts/script.php?script_id=31 or
https://github.com/vim-scripts/a.vim).

                                                      *g:diapp_fring_disabled*
Set g:diapp_fring_disabled to 1 in your |.vimrc| to disable the whole set of
commands described in this section. >

	:let g:diapp_fring_disabled = 1
<

                                                                          *:A*
:A		In the current window, change the edited file to the next file
		in the ring (only if the currently edited file belongs to a
		file ring and at least one of the other file(s) in the ring
		exists). If both files are edited in different windows of the
		current tab page, then the files are swapped in the windows.

                                                               *:EchoAllFRing*
:EchoAllFRing	List all the possible kind of file rings.

:EchoFRingCandidates                                    *:EchoFRingCandidates*
		List all the file rings the currently edited file may belong
		to.

                                                              *:EchoFRingNext*
:EchoFRingNext	Echo the name of the file |:A| would open (only if this file
		exists).

==============================================================================


VIM HELP FILE RELATED ACTIONS AND COMMANDS                     *diapp-vimhelp*

When opening a Vim help file, an `autocommand` is set up so that `helptags` is
run automatically when writing the buffer. The `modeline` on the last line of
the file is also applied (only `textwidth`, `tabstop`, `softtabstop`,
`expandtab` and `rightleft` options).

                                                    *g:diapp_vimhelp_disabled*
Set g:diapp_vimhelp_disabled to 1 in your |.vimrc| to disable the whole set of
features described in this section. >

	:let g:diapp_vimhelp_disabled = 1
<

                                                                         *:FT*
:FT		Toggle the filetype option from empty to "help" (or
		conversely) for the currently edited Vim help file.

                                                     *diapp-vimhelp-auto-fill*
For Vim help files, the default pattern for the |:AF| command is a space
followed by a dot (" .").

==============================================================================


GENERAL COMMANDS                                               *diapp-general*

:AF command ("auto fill")~
                                                                         *:AF*
When available, and if provided with 0, 1 or 2 valid arguments, the `:AF`
command writes after the cursor (like |a|) a pattern as many times as needed
to obtain a line of a given length. The last occurrence of the pattern may be
truncated.

The line length is by default the value of 'textwidth' but a specific line
length can be provided as argument.

If no pattern is provided as argument, then the pattern defaults to the
character under the cursor if the current line is not empty or to a string
which depends on the file type. See:
- |diapp-gprbuild-auto-fill|
- |diapp-vimhelp-auto-fill|

Example #1 - use the default pattern and the default line length: >

	:AF
<

Example #2 - provide a pattern as argument (note the escaping of the space
character): >

	:AF \ .
<

Example #3 - provide both a pattern and a line length as argument (the order
of the arguments is not significant): >

	:AF \ . 50
<

External commands reinvocation~
                                                   *:RerunLastDiappExtCommand*
When invoking an external command, the Diapp features store the command line.
You can rerun the last invoked external command with :RerunLastDiappExtCommand.
:RerunLastDiappExtCommand is mapped by default to <F12> (in both normal and
insert mode). Set variable g:diapp_plugin_rerun_last_diapp_ext_cmd_mapping in
your |.vimrc| to map the command to another key. Example with <F4>: >

	:let g:diapp_plugin_rerun_last_diapp_ext_cmd_mapping="<F4>"
<

==============================================================================

                                                               *diapp-credits*
CREDITS AND LICENSE                                            *diapp-license*

The code of Diapp is by Thierry Rascle <thierr26@free.fr>.

Diapp is released under the MIT license.

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
of the Software, and to permit persons to whom the Software is furnished to do
so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

==============================================================================

 vim:tw=78:ts=8:sts=8:noet:ft=help:norl:
